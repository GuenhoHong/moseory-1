<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.moseory.mapper.UserMapper">

	<resultMap type="MemberVO" id="memberResultMap">
		<result column="id" property="id" />
		<result column="password" property="password" />
		<result column="pwd_confirm_q" property="pwd_confirm_q" />
		<result column="pwd_confirm_a" property="pwd_confirm_a" />
		<result column="name" property="name" />
		<result column="zipcode" property="zipcode" />
		<result column="address1" property="address1" />
		<result column="address2" property="address2" />
		<result column="tel" property="tel" />
		<result column="phone" property="phone" />
		<result column="email" property="email" />
		<result column="birth" property="birth" />
		<result column="lev" property="level" typeHandler="LevelEnumTypeHandler" />
		<result column="point" property="point" />
		<result column="total" property="total" />
		<result column="join_date" property="join_date" />
	</resultMap>
	
	<!-- 회원가입 -->
	<select id="getMember" resultMap="memberResultMap">
	SELECT
		id, password, pwd_confirm_q, pwd_confirm_a , name, zipcode, address1, address2, 
		tel, phone, email, birth, lev, point, total, join_date
	FROM
		tbl_member
	WHERE
		id = #{id}
	</select>
	
	<!-- 회원정보 수정 -->
	<update id="updateMember">
	UPDATE
    	tbl_member 
	SET
	    password = #{password}, pwd_confirm_q = #{pwd_confirm_q}, pwd_confirm_a = #{pwd_confirm_a}, name = #{name}, 
	    zipcode = #{zipcode}, address1 = #{address1}, address2 = #{address2}, tel = #{tel}, phone = #{phone}, email = #{email}, birth = #{birth}
	WHERE
	    id = #{id}
	</update>
	
	<!-- Test 회원 정보 삭제 -->
	<delete id="deleteMember">
	DELETE FROM
		tbl_member
	WHERE
		id = #{id}
	</delete>
	
	<resultMap type="WishListVO" id="wishListMap">
		<result column="id" property="member_id" />
		<collection property="products" resultMap="productMap" />
	</resultMap>
	
	<!-- List<ProductVO>를 처리하기 위한 productMap -->
	<resultMap type="ProductVO" id="productMap">
		<result property="code" column="code" />
		<result property="name" column="name" />
		<result property="price" column="price" />
		<result property="wish_count" column="wish_count" />
		<result property="file_path" column="file_path" />
	</resultMap>
	
	<!-- 관심상품 등록 -->
	<insert id="addWishList">
	INSERT INTO
		tbl_wish_list (member_id, product_code)
	VALUES
		(#{member_id}, #{product_code})
	</insert>
	
	<!-- 등록된 상품 wish_count 증가 -->
	<update id="increaseWishCount">
	UPDATE
	    tbl_product
	SET
	    wish_count = wish_count + 1
	WHERE
	    code = #{product_code}
	</update>
	
	<!-- 관심상품 삭제 -->
	<delete id="deleteWishList">
	DELETE FROM
		tbl_wish_list
	WHERE
		member_id = #{member_id} and product_code = #{product_code}
	</delete>
	
	<!-- 삭제된 상품 wish_count 감소 -->
	<update id="decreaseWishCount">
	UPDATE
	    tbl_product
	SET
	    wish_count = wish_count - 1
	WHERE
	    code = #{product_code}
	</update>
	
	<!-- 관심상품 리스트 -->
	<select id="getWishList" resultMap="wishListMap">
	SELECT
	    m.id, p.code, p.name, p.price, p.wish_count, p.file_path
	FROM
	    tbl_wish_list wl, tbl_member m, tbl_product p
	WHERE
	    wl.member_id = m.id
	    AND wl.product_code = p.code
	    AND wl.member_id = #{member_id}
	</select>
	
	<!-- 관심상품 중복 체크 -->
	<select id="checkWishList" resultType="int">
	SELECT
    	count(*)
	FROM
	    tbl_wish_list
	WHERE
	    member_id = #{member_id}
	    AND product_code = #{product_code}
    </select>
    
    <!-- 장바구니 추가 -->
    <insert id="addToCart">
    INSERT INTO
	    tbl_cart (no, member_id, product_detail_no, quantity)
	VALUES
	    (seq_cart_no.nextval, #{member_id}, #{product_detail_no}, #{quantity})
    </insert>
    
    <!-- 장바구니 중복 확인 -->
    <select id="isExistProductInCart" resultType="int">
    SELECT
		count(*) 
	FROM
		tbl_cart
	WHERE
		member_id = #{member_id}
		AND product_detail_no = #{product_detail_no}
    </select>
    
    <!-- 사용자의 장바구니 정보 조회 -->
    <select id="getCartList" resultType="CartVO">
	SELECT
	    c.no, c.member_id, c.quantity, pd.no as product_detail_no, pd.product_color, pd.product_size, pd.product_stock,
    	p.code as product_code, p.name as product_name, p.price as product_price, p.file_path as product_file_path
	FROM
	    tbl_cart c 
	    JOIN tbl_product_detail pd 
	    ON c.product_detail_no = pd.no
	    JOIN tbl_product p
	    ON pd.product_code = p.code
	WHERE
	    member_id = #{member_id}
	ORDER BY
	    p.name, c.no desc
    </select>
    
    <!-- 사용자의 장바구니 목록 개수 -->
    <select id="getCartCount" resultType="int">
    SELECT
	    count(*)
	FROM
	    tbl_cart
	WHERE
	    member_id = #{member_id}
    </select>
	
	<!-- 장바구니 목록 수량 변경 -->
	<update id="updateCartQuantity">
	UPDATE
		tbl_cart
	SET
		quantity = #{quantity}
	WHERE
		no = #{no}
	</update>
	
	<!-- 변경한 목록의 수량 조회 -->
	<select id="getCartQuantity" resultType="int">
	SELECT
		quantity
	FROM
		tbl_cart
	WHERE
		no = #{no}
	</select>
	
	<!-- 해당 장바구니 목록 삭제 -->
	<delete id="deleteCartList">
	DELETE FROM
	    tbl_cart
	WHERE
	    no = #{no}
	</delete>
	
	<!-- 장바구니 비우기 -->
	<delete id="deleteCartAll">
	DELETE FROM
		tbl_cart
	WHERE
		member_id = #{member_id}
	</delete>
	
	<!-- 주문 목록에 추가 하려는 상품 정보 -->
	<select id="getAddedOrderInfo" resultType="AddedOrderInfoVO">
	SELECT
		p.code, p.file_path, p.name, p.price, pd.no as product_detail_no, pd.product_color, pd.product_size 
	FROM
		tbl_product p join tbl_product_detail pd on p.code = pd.product_code
	WHERE
		pd.no = #{product_detail_no}
	</select>
	
	<!-- ORDER -->
	<!-- 회원의 적립금과 총구매금액 변경 -->
	<update id="updateOrderMember">
	UPDATE
	    tbl_member
	SET
	    point = point - #{used_point}
	WHERE
	    id = #{member_id}
	</update>
	
	<!-- 상품의 판매량 변경 -->
	<update id="updateOrderProduct">
	UPDATE
	    tbl_product
	SET
	    sale_count = sale_count + #{quantity}
	WHERE
	    code = #{product_code}
	</update>
	
	<!-- 상품 디테일의 재고 변경 -->
	<update id="updateOrderProductDetail">
	UPDATE
	    tbl_product_detail
	SET
	    product_stock = product_stock - #{quantity}
	WHERE
	    no = #{product_detail_no}
	</update>
	
	<!-- 주문한 상품 장바구니에서 삭제 -->
	<delete id="deleteOrderCart">
	DELETE FROM
		tbl_cart 
	WHERE 
		product_detail_no = #{product_detail_no} 
		AND member_id = #{member_id}
	</delete>
	
	<!-- 주문 정보 입력 -->
	<insert id="addOrder">
	INSERT INTO
	    tbl_order (code, member_id, delivery_charge, state, recipient_name, recipient_zipcode,  recipient_address1, 
	              recipient_address2, recipient_tel, recipient_phone, recipient_email, message, pay_method, used_point)
	VALUES (#{code}, #{member_id}, #{delivery_charge}, '입금 확인중', #{recipient_name}, #{recipient_zipcode},  #{recipient_address1}, 
	       #{recipient_address2}, #{recipient_tel}, #{recipient_phone}, #{recipient_email}, #{message}, #{pay_method}, #{used_point})
	</insert>
	
	<!-- 주문 상세 테이블 -->
	<insert id="addOrderDetail">
	INSERT INTO
	    tbl_order_detail (order_code, product_detail_no, amount, discount, point, quantity)
	VALUES (#{order_code}, #{product_detail_no}, #{amount}, #{discount}, #{point}, #{quantity})
	</insert>
	
	<!-- 주문 코드로 주문 정보 조회 -->
	<select id="getOrder" resultType="OrderVO">
	SELECT
		code, member_id, order_date, delivery_charge, state, recipient_name, recipient_zipcode, recipient_address1,
    	recipient_address2, recipient_tel, recipient_phone, recipient_email, message, pay_method, used_point
	FROM
		tbl_order
	WHERE
		code = #{code}
	</select>
	
	<!-- 주문 코드로 주문 상세 정보 조회 -->
	<select id="getOrderDetail" resultType="OrderDetailVO">
	SELECT
	    od.order_code, od.product_detail_no, od.amount, od.discount, od.point, od.quantity, p.code as product_code,
	    p.price as product_price, p.file_path as product_file_path, p.name as product_name, pd.product_color, pd.product_size
	FROM
	    tbl_order_detail od, tbl_product p, tbl_product_detail pd
	WHERE
	    od.product_detail_no = pd.no
	    AND pd.product_code = p.code
	    AND order_code = #{order_code}
	</select>
	
	<!-- END ORDER -->
	
</mapper>


























